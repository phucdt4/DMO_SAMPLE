managed;
with draft;

define behavior for /DMO/I_Travel_D alias Travel
implementation in class /dmo/bp_travel_d unique
persistent table /dmo/a_travel_d
draft table /dmo/d_travel_d
lock master
total etag LastChangedAt
//authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;
  association _Booking { create ( features : instance ); with draft; }

  field ( numbering : managed, readonly ) TravelUUID;
  field ( readonly ) TravelID, OverallStatus, TotalPrice, LocalCreatedAt, LocalCreatedBy, LocalLastChangedAt, LocalLastChangedBy;
  field ( mandatory ) CustomerID, AgencyID, BeginDate, EndDate;
  field ( features : instance ) BookingFee;

  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;
  action ( features : instance ) deductDiscount parameter /dmo/a_travel_discount result [1] $self;
  internal action reCalcTotalPrice;

  determination setTravelNumber on save { create; }
  determination setStatusToNew on modify { create; }
  determination calculateTotalPrice on modify { create; field BookingFee, CurrencyCode; }

  validation validateCustomer on save { create; field CustomerID; }
  validation validateAgency on save { create; field AgencyID; }
  validation validateDates on save { create; field BeginDate, EndDate; }

  draft determine action Prepare
  {
    validation validateAgency;
    validation validateCustomer;
    validation validateDates;
    validation Booking ~ validateCustomer;
    validation Booking ~ validateConnection;
    validation Bookingsupplement ~ validateSupplement; }

  mapping for /dmo/a_travel_d
  { AgencyID = agency_id;
    BeginDate = begin_date;
    BookingFee = booking_fee;
    CurrencyCode = currency_code;
    CustomerID = customer_id;
    Description = description;
    EndDate = end_date;
    LastChangedAt = last_changed_at;
    LocalCreatedAt = local_created_at;
    LocalCreatedBy = local_created_by;
    LocalLastChangedAt = local_last_changed_at;
    LocalLastChangedBy = local_last_changed_by;
    OverallStatus = overall_status;
    TotalPrice = total_price;
    TravelID = travel_id;
    TravelUUID = travel_uuid; }
}

define behavior for /DMO/I_Booking_D alias Booking
implementation in class /dmo/bp_booking_d unique
persistent table /dmo/a_booking_d
draft table /dmo/d_booking_d
lock dependent by _Travel
//authorization dependent by <association>
etag master LocalLastChangedAt
{
  update;
  delete;
  association _BookingSupplement { create ; with draft; }

  association _Travel { with draft; }

  field ( numbering : managed, readonly ) BookingUUID;
  field ( readonly ) TravelUUID, BookingID, BookingDate, LocalLastChangedAt;
  field ( mandatory ) CustomerID, AirlineID, ConnectionID, FlightDate;

  determination setBookingNumber on save { create; }
  determination setBookingDate on save { create; }
  determination calculateTotalPrice on modify { create; field FlightPrice, CurrencyCode; }

  validation validateCustomer on save { create; field CustomerID; }
  validation validateConnection on save { create; field AirlineID, ConnectionID, FlightDate; }

  mapping for /dmo/a_booking_d
  { AirlineID = carrier_id;
    BookingDate = booking_date;
    BookingID = booking_id;
    BookingStatus = booking_status;
    BookingUUID = booking_uuid;
    ConnectionID = connection_id;
    CurrencyCode = currency_code;
    CustomerID = customer_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    LocalLastChangedAt = local_last_changed_at;
    TravelUUID = parent_uuid; }

}

define behavior for /DMO/I_BookingSupplement_D alias BookingSupplement
implementation in class /dmo/bp_bookingsupplement_d unique
persistent table /dmo/a_bksuppl_d
draft table /dmo/d_bksuppl_d
lock dependent by _Travel
//authorization dependent by <association>
etag master LocalLastChangedAt
{
  update;
  delete;

  association _Travel { with draft; }

  field ( numbering : managed, readonly ) BookSupplUUID;
  field ( readonly ) TravelUUID, BookingUUID, BookingSupplementID, LocalLastChangedAt;
  field ( mandatory ) SupplementID;

  determination setBookSupplNumber on save { create; }
  determination calculateTotalPrice on modify { create; field CurrencyCode, BookSupplPrice; }

  validation validateSupplement on save { create; field SupplementID; }

  mapping for /dmo/a_bksuppl_d
  { BookSupplPrice = price;
    BookSupplUUID = booksuppl_uuid;
    BookingSupplementID = booking_supplement_id;
    BookingUUID = parent_uuid;
    CurrencyCode = currency_code;
    LocalLastChangedAt = local_last_changed_at;
    SupplementID = supplement_id;
    TravelUUID = root_uuid; }

}